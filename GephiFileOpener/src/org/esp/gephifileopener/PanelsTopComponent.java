/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.esp.gephifileopener;

import java.awt.Color;
import java.awt.Desktop;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.text.DecimalFormat;
import java.util.ArrayList;
import javax.swing.SwingUtilities;
import javax.swing.ToolTipManager;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter;
import jsyntaxpane.DefaultSyntaxKit;
import org.gephi.data.attributes.api.AttributeController;
import org.gephi.data.attributes.api.AttributeRow;
import org.gephi.data.attributes.api.AttributeTable;
import org.gephi.graph.api.Attributes;
import org.gephi.graph.api.Node;
import org.gephi.graph.api.NodeData;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.util.ImageUtilities;
import org.openide.util.Lookup;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
dtd = "-//org.esp.gephifileopener//editCPP//EN",
autostore = false)
@TopComponent.Description(
preferredID = "editCPPTopComponent",
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "output", openAtStartup = false)
@ActionID(category = "Window", id = "org.esp.gephifileopener.editCPPTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
displayName = "#CTL_editCPPAction",
preferredID = "editCPPTopComponent")
@Messages({
    "CTL_editCPPAction=Code Editor",
    "CTL_editCPPTopComponent=Code Editor Window",
    "HINT_editCPPTopComponent=This is a code editor window"
})
public final class PanelsTopComponent extends TopComponent {
    final private String ICON_PATH = "/org/esp/gephifileopener/page_white_cplusplus.png";
    final private ArrayList<Node> nextSelection = new ArrayList<Node>();
    private MosesController mc;
    private final NodeSelectionManager nsm = new NodeSelectionManager();
    private final ComboBoxRenderer renderer;
    int mosesPeriod = 0;
    String mosesOuputDirectory = null, mosesModel = null, mosesGroup = null;
    
    public PanelsTopComponent() {
        initComponents();
        setName(Bundle.CTL_editCPPTopComponent());
        setToolTipText(Bundle.HINT_editCPPTopComponent());
        renderer = new ComboBoxRenderer(neighborNodesList);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        codePanel = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jToolBar3 = new javax.swing.JToolBar();
        saveButton = new javax.swing.JButton();
        contSaveToggle = new javax.swing.JToggleButton();
        parentDirButton = new javax.swing.JButton();
        openButton = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        precedentsButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        dependentsButton = new javax.swing.JButton();
        jToolBar4 = new javax.swing.JToolBar();
        refreshButton = new javax.swing.JButton();
        filenameField = new javax.swing.JTextField();
        jToolBar2 = new javax.swing.JToolBar();
        centerOnNode = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        commitButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        revertButton = new javax.swing.JButton();
        repoLogButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        diffButton = new javax.swing.JButton();
        repoBrowseButton = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        codePane = new javax.swing.JEditorPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        neighborNodesList = new javax.swing.JList<NodeListWrapper>();
        periodField = new javax.swing.JTextField();
        mosesOutputField = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        chooseButton = new javax.swing.JButton();
        modelNameField = new javax.swing.JTextField();
        outDirectoryField = new javax.swing.JTextField();
        statusLabel = new javax.swing.JLabel();

        setIcon(ImageUtilities.loadImage(ICON_PATH, true));
        setName("codePanel"); // NOI18N

        codePanel.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);

        jToolBar3.setFloatable(false);
        jToolBar3.setRollover(true);

        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/esp/gephifileopener/saveProject.png"))); // NOI18N
        saveButton.setToolTipText(org.openide.util.NbBundle.getMessage(PanelsTopComponent.class, "PanelsTopComponent.saveButton.toolTipText")); // NOI18N
        saveButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveButtonMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                saveButtonMouseExited(evt);
            }
        });
        jToolBar3.add(saveButton);

        contSaveToggle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/esp/gephifileopener/film_save.png"))); // NOI18N
        contSaveToggle.setToolTipText(org.openide.util.NbBundle.getMessage(PanelsTopComponent.class, "PanelsTopComponent.contSaveToggle.toolTipText")); // NOI18N
        contSaveToggle.setFocusable(false);
        contSaveToggle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        contSaveToggle.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar3.add(contSaveToggle);

        parentDirButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/esp/gephifileopener/folder.png"))); // NOI18N
        parentDirButton.setToolTipText(org.openide.util.NbBundle.getMessage(PanelsTopComponent.class, "PanelsTopComponent.parentDirButton.toolTipText")); // NOI18N
        parentDirButton.setFocusable(false);
        parentDirButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        parentDirButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        parentDirButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                parentDirButtonMouseClicked(evt);
            }
        });
        jToolBar3.add(parentDirButton);

        openButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/esp/gephifileopener/application_get.png"))); // NOI18N
        openButton.setToolTipText(org.openide.util.NbBundle.getMessage(PanelsTopComponent.class, "PanelsTopComponent.openButton.toolTipText")); // NOI18N
        openButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                openButtonMouseClicked(evt);
            }
        });
        jToolBar3.add(openButton);
        jToolBar3.add(jSeparator4);

        precedentsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/esp/gephifileopener/control_rewind_blue.png"))); // NOI18N
        precedentsButton.setToolTipText(org.openide.util.NbBundle.getMessage(PanelsTopComponent.class, "PanelsTopComponent.precedentsButton.toolTipText")); // NOI18N
        precedentsButton.setFocusable(false);
        precedentsButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        precedentsButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        precedentsButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                precedentsButtonMousePressed(evt);
            }
        });
        jToolBar3.add(precedentsButton);

        resetButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/esp/gephifileopener/control_stop_blue.png"))); // NOI18N
        resetButton.setToolTipText(org.openide.util.NbBundle.getMessage(PanelsTopComponent.class, "PanelsTopComponent.resetButton.toolTipText")); // NOI18N
        resetButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        resetButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        resetButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resetButtonMouseClicked(evt);
            }
        });
        jToolBar3.add(resetButton);

        dependentsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/esp/gephifileopener/control_fastforward_blue.png"))); // NOI18N
        dependentsButton.setToolTipText(org.openide.util.NbBundle.getMessage(PanelsTopComponent.class, "PanelsTopComponent.dependentsButton.toolTipText")); // NOI18N
        dependentsButton.setFocusable(false);
        dependentsButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        dependentsButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        dependentsButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dependentsButtonMouseClicked(evt);
            }
        });
        jToolBar3.add(dependentsButton);

        jToolBar4.setFloatable(false);

        refreshButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/esp/gephifileopener/refresh.png"))); // NOI18N
        refreshButton.setToolTipText(org.openide.util.NbBundle.getMessage(PanelsTopComponent.class, "PanelsTopComponent.refreshButton.toolTipText")); // NOI18N
        refreshButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                refreshButtonMouseClicked(evt);
            }
        });
        jToolBar4.add(refreshButton);

        filenameField.setText(org.openide.util.NbBundle.getMessage(PanelsTopComponent.class, "PanelsTopComponent.filenameField.text")); // NOI18N
        filenameField.setToolTipText(org.openide.util.NbBundle.getMessage(PanelsTopComponent.class, "PanelsTopComponent.filenameField.toolTipText")); // NOI18N
        jToolBar4.add(filenameField);

        jToolBar2.setFloatable(false);
        jToolBar2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jToolBar2.setRollover(true);

        centerOnNode.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/esp/gephifileopener/centerOnZero.png"))); // NOI18N
        centerOnNode.setToolTipText(org.openide.util.NbBundle.getMessage(PanelsTopComponent.class, "PanelsTopComponent.centerOnNode.toolTipText")); // NOI18N
        centerOnNode.setFocusable(false);
        centerOnNode.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        centerOnNode.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        centerOnNode.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                centerOnNodeMouseClicked(evt);
            }
        });
        jToolBar2.add(centerOnNode);
        jToolBar2.add(jSeparator3);

        commitButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/esp/gephifileopener/accept.png"))); // NOI18N
        commitButton.setToolTipText(org.openide.util.NbBundle.getMessage(PanelsTopComponent.class, "PanelsTopComponent.commitButton.toolTipText")); // NOI18N
        commitButton.setFocusable(false);
        commitButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        commitButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        commitButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                commitButtonMouseClicked(evt);
            }
        });
        jToolBar2.add(commitButton);

        updateButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/esp/gephifileopener/basket_put.png"))); // NOI18N
        updateButton.setToolTipText(org.openide.util.NbBundle.getMessage(PanelsTopComponent.class, "PanelsTopComponent.updateButton.toolTipText")); // NOI18N
        updateButton.setFocusable(false);
        updateButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        updateButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        updateButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updateButtonMouseClicked(evt);
            }
        });
        jToolBar2.add(updateButton);

        revertButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/esp/gephifileopener/bomb.png"))); // NOI18N
        revertButton.setToolTipText(org.openide.util.NbBundle.getMessage(PanelsTopComponent.class, "PanelsTopComponent.revertButton.toolTipText")); // NOI18N
        revertButton.setFocusable(false);
        revertButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        revertButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        revertButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                revertButtonMouseClicked(evt);
            }
        });
        jToolBar2.add(revertButton);

        repoLogButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/esp/gephifileopener/comments.png"))); // NOI18N
        repoLogButton.setToolTipText(org.openide.util.NbBundle.getMessage(PanelsTopComponent.class, "PanelsTopComponent.repoLogButton.toolTipText")); // NOI18N
        repoLogButton.setFocusable(false);
        repoLogButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        repoLogButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        repoLogButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                repoLogButtonMouseClicked(evt);
            }
        });
        jToolBar2.add(repoLogButton);
        jToolBar2.add(jSeparator1);

        diffButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/esp/gephifileopener/application_tile_horizontal.png"))); // NOI18N
        diffButton.setToolTipText(org.openide.util.NbBundle.getMessage(PanelsTopComponent.class, "PanelsTopComponent.diffButton.toolTipText")); // NOI18N
        diffButton.setFocusable(false);
        diffButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        diffButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        diffButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                diffButtonMouseClicked(evt);
            }
        });
        jToolBar2.add(diffButton);

        repoBrowseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/esp/gephifileopener/application_home.png"))); // NOI18N
        repoBrowseButton.setToolTipText(org.openide.util.NbBundle.getMessage(PanelsTopComponent.class, "PanelsTopComponent.repoBrowseButton.toolTipText")); // NOI18N
        repoBrowseButton.setFocusable(false);
        repoBrowseButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        repoBrowseButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        repoBrowseButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                repoBrowseButtonMouseClicked(evt);
            }
        });
        jToolBar2.add(repoBrowseButton);

        jSplitPane1.setDividerLocation(1000);
        jSplitPane1.setLastDividerLocation(1000);
        jSplitPane1.setMinimumSize(new java.awt.Dimension(200, 25));
        jSplitPane1.setName(""); // NOI18N
        jSplitPane1.setPreferredSize(new java.awt.Dimension(200, 132));

        codePane.setToolTipText(org.openide.util.NbBundle.getMessage(PanelsTopComponent.class, "PanelsTopComponent.codePane.toolTipText")); // NOI18N
        codePane.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                codePaneFocusGained(evt);
            }
        });
        jScrollPane1.setViewportView(codePane);

        jSplitPane1.setLeftComponent(jScrollPane1);

        neighborNodesList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        neighborNodesList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                neighborNodesListMouseClicked(evt);
            }
        });
        neighborNodesList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                neighborNodesListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(neighborNodesList);

        jSplitPane1.setRightComponent(jScrollPane2);

        periodField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        periodField.setText(org.openide.util.NbBundle.getMessage(PanelsTopComponent.class, "PanelsTopComponent.periodField.text")); // NOI18N
        periodField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                periodFieldFocusLost(evt);
            }
        });

        mosesOutputField.setText(org.openide.util.NbBundle.getMessage(PanelsTopComponent.class, "PanelsTopComponent.mosesOutputField.text")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1331, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jToolBar3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(periodField, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mosesOutputField, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jToolBar3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(periodField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(mosesOutputField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToolBar4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jToolBar2, javax.swing.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
                    .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        codePanel.addTab(org.openide.util.NbBundle.getMessage(PanelsTopComponent.class, "PanelsTopComponent.jPanel1.TabConstraints.tabTitle"), jPanel1); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(chooseButton, org.openide.util.NbBundle.getMessage(PanelsTopComponent.class, "PanelsTopComponent.chooseButton.text")); // NOI18N
        chooseButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chooseButtonMouseClicked(evt);
            }
        });

        modelNameField.setText(org.openide.util.NbBundle.getMessage(PanelsTopComponent.class, "PanelsTopComponent.modelNameField.text")); // NOI18N

        outDirectoryField.setText(org.openide.util.NbBundle.getMessage(PanelsTopComponent.class, "PanelsTopComponent.outDirectoryField.text")); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(modelNameField)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(chooseButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(statusLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(outDirectoryField, javax.swing.GroupLayout.DEFAULT_SIZE, 1342, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(outDirectoryField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(modelNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chooseButton)
                    .addComponent(statusLabel))
                .addContainerGap(207, Short.MAX_VALUE))
        );

        codePanel.addTab(org.openide.util.NbBundle.getMessage(PanelsTopComponent.class, "PanelsTopComponent.jPanel2.TabConstraints.tabTitle"), jPanel2); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1367, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(codePanel))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 321, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(codePanel))
        );

        codePanel.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(PanelsTopComponent.class, "PanelsTopComponent.codePanel.AccessibleContext.accessibleName")); // NOI18N
    }// </editor-fold>//GEN-END:initComponents

    private void openButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_openButtonMouseClicked
        // TODO add your handling code here:
        String filename = filenameField.getText();
        File cpp = new File(filename);
        if(cpp.isFile() && cpp.exists())
        {
            if(contSaveToggle.isSelected())
            {
                checkSave(filenameField.getText()); //potential bug
            }
            editFile(cpp);
        }
    }//GEN-LAST:event_openButtonMouseClicked

    private void refreshButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshButtonMouseClicked
        // TODO add your handling code here:
        setFileContent(filenameField.getText(),false);
    }//GEN-LAST:event_refreshButtonMouseClicked

    private void saveButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveButtonMouseClicked
        // TODO add your handling code here:
        checkSave(filenameField.getText()); //potential bug
    }//GEN-LAST:event_saveButtonMouseClicked

    private void saveButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveButtonMouseExited
        // TODO add your handling code here:
        saveButton.setToolTipText("Save the file.");
    }//GEN-LAST:event_saveButtonMouseExited

    private void repoLogButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_repoLogButtonMouseClicked
        if(filenameField.getText() != null){
            runCMD(tsvnLog(filenameField.getText()));
        }
    }//GEN-LAST:event_repoLogButtonMouseClicked

    private void repoBrowseButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_repoBrowseButtonMouseClicked
        // TODO add your handling code here:
        if(filenameField.getText() != null){
            runCMD(tsvnRepoBrowser(filenameField.getText()));
        }
    }//GEN-LAST:event_repoBrowseButtonMouseClicked

    private void commitButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_commitButtonMouseClicked
        // TODO add your handling code here:
        if(filenameField.getText() != null){
            checkSave(filenameField.getText()); //potential bug
            SwingUtilities.invokeLater(new Runnable() 
            {
                public void run()
                {
                  runCMD(tsvnCommit(filenameField.getText()));
                }
            });
        }
    }//GEN-LAST:event_commitButtonMouseClicked

    private void updateButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateButtonMouseClicked
        // TODO add your handling code here:
        if(filenameField.getText() != null){
            runCMD(tsvnUpdate(filenameField.getText(), true));
            setFileContent(filenameField.getText(),false);
        }
    }//GEN-LAST:event_updateButtonMouseClicked

    private void revertButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_revertButtonMouseClicked
        // TODO add your handling code here:
        if(filenameField.getText() != null){
            runCMD(tsvnRevert(filenameField.getText()));
            setFileContent(filenameField.getText(),false);
        }
    }//GEN-LAST:event_revertButtonMouseClicked

    private void diffButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_diffButtonMouseClicked
        // TODO add your handling code here:
        if(filenameField.getText() != null){
            runCMD(tsvnDiff(filenameField.getText()));
        }
    }//GEN-LAST:event_diffButtonMouseClicked

    private void parentDirButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_parentDirButtonMouseClicked
        // TODO add your handling code here:
        File file = new File(filenameField.getText());
        if (!file.isDirectory() && file.isFile())
           file = file.getParentFile();
        if (file.exists() && file.isDirectory()){
            editFile(file);
        }
    }//GEN-LAST:event_parentDirButtonMouseClicked

    private void neighborNodesListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_neighborNodesListMouseClicked
        // TODO add your handling code here:
        Node gotoNode = (neighborNodesList.getSelectedValue()).getNode();
        if(gotoNode!=null)
        {
            if(evt.getClickCount() == 1 && !evt.isConsumed()){
                evt.consume();
                //nsm.resetSelection();
                setPairNode(gotoNode);
                Color c = new Color(gotoNode.getNodeData().r(),gotoNode.getNodeData().g(),gotoNode.getNodeData().b());
                markAll(gotoNode.getNodeData().getLabel(),renderer.mixColor(c, Color.WHITE));
            }
            if(evt.getClickCount() == 2 && !evt.isConsumed()){
                evt.consume();
                //sm.centerOnNode(gotoNode);
                editNode(gotoNode);
                codePane.requestFocusInWindow();
            }
        }
    }//GEN-LAST:event_neighborNodesListMouseClicked

    private void codePaneFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_codePaneFocusGained
        // TODO add your handling code here:
        nsm.setSelection();
    }//GEN-LAST:event_codePaneFocusGained

    private void centerOnNodeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_centerOnNodeMouseClicked
        // TODO add your handling code here:
        nsm.centerOnRoot();
        codePane.requestFocusInWindow();
    }//GEN-LAST:event_centerOnNodeMouseClicked

    private void neighborNodesListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_neighborNodesListValueChanged
        // TODO add your handling code here:
        nsm.resetSelection();
    }//GEN-LAST:event_neighborNodesListValueChanged

    private void dependentsButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dependentsButtonMouseClicked
        // TODO add your handling code here:
        nsm.pushDependents();
    }//GEN-LAST:event_dependentsButtonMouseClicked

    private void precedentsButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_precedentsButtonMousePressed
        // TODO add your handling code here:
        nsm.pushPrecedents();
    }//GEN-LAST:event_precedentsButtonMousePressed

    private void resetButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resetButtonMouseClicked
        // TODO add your handling code here:
        nsm.resetSelection();
        requestFocus();
    }//GEN-LAST:event_resetButtonMouseClicked

    private void chooseButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chooseButtonMouseClicked
        // TODO add your handling code here:
        //System.out.println("You clicked the Directory button...");
        mosesOuputDirectory = outDirectoryField.getText();
        mosesModel = modelNameField.getText();
        mc.setOutputDirectory(mosesOuputDirectory);
        if(mc.mosesOutputReady())
        {
            statusLabel.setText("Ready!");
        }
        else
        {
            statusLabel.setText("Error! Please check output path.");
        }
    }//GEN-LAST:event_chooseButtonMouseClicked

    private void periodFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_periodFieldFocusLost
        // TODO add your handling code here:
        mosesPeriod = Integer.parseInt(periodField.getText());
    }//GEN-LAST:event_periodFieldFocusLost

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton centerOnNode;
    private javax.swing.JButton chooseButton;
    private javax.swing.JEditorPane codePane;
    private javax.swing.JTabbedPane codePanel;
    private javax.swing.JButton commitButton;
    private javax.swing.JToggleButton contSaveToggle;
    private javax.swing.JButton dependentsButton;
    private javax.swing.JButton diffButton;
    private javax.swing.JTextField filenameField;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JToolBar jToolBar3;
    private javax.swing.JToolBar jToolBar4;
    private javax.swing.JTextField modelNameField;
    private javax.swing.JTextField mosesOutputField;
    private javax.swing.JList<NodeListWrapper> neighborNodesList;
    private javax.swing.JButton openButton;
    private javax.swing.JTextField outDirectoryField;
    private javax.swing.JButton parentDirButton;
    private javax.swing.JTextField periodField;
    private javax.swing.JButton precedentsButton;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton repoBrowseButton;
    private javax.swing.JButton repoLogButton;
    private javax.swing.JButton resetButton;
    private javax.swing.JButton revertButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
        DefaultSyntaxKit.initKit();
        codePane.setContentType("text/cpp");
    }
    
    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
    
    public boolean editFile(final File file) {
        if (!Desktop.isDesktopSupported()) {
          return false;
        }

        Desktop desktop = Desktop.getDesktop();
        if (!desktop.isSupported(Desktop.Action.OPEN)) {
          return false;
        }

        try {
          desktop.open(file);
        } catch (IOException e) {
          // Log an error
          Exceptions.printStackTrace(e);
          return false;
        }

        return true;
    }
    
    public void markAll(String find, Color c)
    {
        Highlighter h = codePane.getHighlighter();
        h.removeAllHighlights();
        ArrayList<Integer> allFound = findAll(find);
        if(allFound!=null)
        {
            for(int i: findAll(find))
            {
                try
                {
                    h.addHighlight(i, i+find.length(), new DefaultHighlighter.DefaultHighlightPainter(c));
                }
                catch(Exception e)
                {
                    Exceptions.printStackTrace(e);
                }
            }
        }
    }
    
    private ArrayList<Integer> findAll(String find)
    {
        ArrayList<Integer> foundIndices = new ArrayList<Integer>();
        int lastIndex = codePane.getText().lastIndexOf(find);
        int i=0;
        int found;
        if(lastIndex>-1)
        {
            while(i<lastIndex)
            {
                found = codePane.getText().indexOf(find, i);
                if(found>-1)
                {
                    i=i+find.length();
                }
                else
                {
                    i = lastIndex;
                }
                foundIndices.add(found);
            }
            return foundIndices;
        }
        else
        {
            return null;
        }
    }
    
    public boolean setFilename(String filename)
    {
        //System.out.println(filename);
        File file = new File(filename);
        if(file.exists())
        {
            String currentFilename = filenameField.getText();
            filenameField.setText(filename);
            return true;
        }
        else
        {
            if(contSaveToggle.isSelected())
            {
                checkSave(filenameField.getText());  //potential bug if filenameField does not correspond to contents of codePane
            }
            filenameField.setText("");
            codePane.setText("");
            return false;
        }
    }
    
    public void setFileContent(final String filename, boolean respectSaveToggle){
        if(respectSaveToggle && contSaveToggle.isSelected())
        {
            checkSave(filename);
        }
        if(mc==null)
        {
            mc = new MosesController();
            
            mc.setModelDirectory(Paths.get(filename).getParent().getParent().getParent().toString());
        }
        if(!mc.mosesFMLReady())
        {
            mc.setModelDirectory(Paths.get(filename).getParent().getParent().getParent().toString());
        }
        SwingUtilities.invokeLater(new Runnable() 
        {
          public void run()
          {
            if(setFilename(filename)){
                codePane.setText(readFile(filename));
                jScrollPane1.setVisible(true);
            }
          }
        });
    }
    
    private static String readFile(String readFilename){
        String text = "Error.";
        try{
            byte[] encoded = Files.readAllBytes(Paths.get(readFilename));
            text = new String(encoded, Charset.defaultCharset());            
        } catch (IOException ex){
            Exceptions.printStackTrace(ex);
        }
        return text;
    }
    
    public void checkSave(String filename){
        String currentFile = filenameField.getText();
        File file = new File(currentFile);
        if(file.isFile() && file.exists())
        {
            if(filename.equals(currentFile)){
                saveFile(filename);
            } else{
                saveFile(currentFile);
            }
        }
    }
    
    private void saveFile(String fileToSave){
        try {
            FileWriter out = new FileWriter(fileToSave);
            out.write(codePane.getText());
            out.close();
            //System.out.println("Save path is " + Paths.get(fileToSave).getParent().getParent().toString());
            mc.updateFML(nsm.getRootNode());
            AttributeRow row = (AttributeRow) nsm.getRootNode().getNodeData().getAttributes();
            //System.out.println("getId(): "+ currentRootNode.getId() + "getValue(): " + row.getValue("Id").toString());
            String saveText = codePane.getText();
            /*
            if(mc.mosesFMLReady() && saveText.length()<255) //foxpro odbc cannot update with more than 255 chars! but can use UPDATE table SET("255 chars" + "255chars" + ...)
            {
                mc.updateFML(nsm.getRootNode(),codePane.getText());
                saveButton.setToolTipText("Saved.");
            }
            else
            {*/
                saveButton.setToolTipText("Saved. Please run Update Formulas in Moses.");
            //}
            ToolTipManager.sharedInstance().mouseMoved(
                new MouseEvent(saveButton, 0, 0, 0,
                        0, 0, // X-Y of the mouse for the tool tip
                        0, false));
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
        
    }
    
    public void runCMD(String cmd){
        try {
            Process process = Runtime.getRuntime().exec(cmd);
            
            // Get input streams
            BufferedReader stdInput = new BufferedReader(new InputStreamReader(process.getInputStream()));
            BufferedReader stdError = new BufferedReader(new InputStreamReader(process.getErrorStream()));

            // Read command standard output
            String s;
            System.out.println("Standard output: ");
            while ((s = stdInput.readLine()) != null) {
                System.out.println(s);
            }

            // Read command errors
            System.out.println("Standard error: ");
            while ((s = stdError.readLine()) != null) {
                System.out.println(s);
            }
        } catch (IOException e) {
            e.printStackTrace(System.err);
        }
    }
    class NodeListWrapper implements Node{
        private final Node node;
        NodeListWrapper(Node inNode){
            node = inNode;
        }
        public Node getNode(){
            return node;
        }
        @Override
        public String toString(){
            AttributeRow row = (AttributeRow) node.getNodeData().getAttributes();
            return row.getValue("prod") + "_" + row.getValue("purp") + "->" + node.getNodeData().getLabel();
        }

        @Override
        public int getId() {
            return node.getId();
        }

        @Override
        public NodeData getNodeData() {
            return node.getNodeData();
        }

        @Override
        public Attributes getAttributes() {
            return node.getAttributes();
        }
    }
    
    public void setPairNode(Node node)
    {
        nsm.setPairwiseSelection(node);
    }
   
    public void editNode(Node node){
        nsm.setRootNode(node);
        ArrayList<NodeListWrapper> neighborsList = new ArrayList<NodeListWrapper>();
        ArrayList<Integer> displayStyle = new ArrayList<Integer>();
        for(Node nnode : nsm.getNeighbors()){
            neighborsList.add(new NodeListWrapper(nnode));
            if(nsm.isDependent(nnode))
            {
                displayStyle.add((Integer) 0);
            }
            else
            {
                displayStyle.add((Integer) 1);
            }
        }
        renderer.setStyle(displayStyle);
        renderer.setNodes(neighborsList);
        neighborNodesList.setCellRenderer(renderer);
        NodeListWrapper[] tempNLW = new NodeListWrapper[neighborsList.size()];  //create a temporary array
        tempNLW = neighborsList.toArray(tempNLW);                               //convert neighborsList to array using the typed temp array as argument
        neighborNodesList.setListData(tempNLW);
        AttributeTable table = Lookup.getDefault().lookup(AttributeController.class).getModel().getNodeTable();
        String column = "cppFile";
        if (table.hasColumn(column)) 
        {
            AttributeRow row = (AttributeRow) node.getNodeData().getAttributes();
            final Object value;
            if ((value = row.getValue(column)) != null) 
            {
                setFileContent(value.toString(), true);
                codePane.requestFocus();
                final Node cur = node;
                if(mc!=null && mc.mosesOutputReady())
                {
                    //=============================================================== REFACTOR
                    SwingUtilities.invokeLater(new Runnable() 
                    {
                        public void run()
                        {
                            double outResult;
                            outResult = mc.getOutput(mosesModel, cur, mosesPeriod);
                            if(outResult<0)
                            {
                                mosesOutputField.setText("No Data");
                            }
                            else if(outResult > 999)
                            {
                                DecimalFormat formatter = new DecimalFormat("#,###.00");
                                mosesOutputField.setText(formatter.format(outResult));
                            }
                            else
                            {
                                mosesOutputField.setText(String.format("%.6f",outResult));
                            }
                        }
                    });
                    //=======================================================================
                }
            }
            else
            {
                setFilename("");
            }
        }
    }
    
    private String tsvnLog(String filename){
        return "TortoiseProc /command:log /path:\"" + filename +"\"";
    }
    
    private String tsvnRepoBrowser(String filename){
        return "TortoiseProc /command:repobrowser /path:\"" + filename +"\"";
    }
    
    private String tsvnDiff(String filename){
        return "TortoiseProc /command:diff /path:\"" + filename +"\"";
    }
    
    private String tsvnRepoStatus(String filename){
        return "TortoiseProc /command:repostatus /path:\"" + filename +"\"";
    }
    
    private String tsvnUpdate(String filename, boolean promptRev){
        String command = "TortoiseProc /command:update /path:\"" + filename +"\"";
        if(promptRev)
        {
            command = command + " /rev";
        }
        return command;
    }
    
    private String tsvnCommit(String filename){
        return "TortoiseProc /command:commit /path:\"" + filename +"\"";
    }
    
    private String tsvnRevert(String filename){
        return "TortoiseProc /command:revert /path:\"" + filename +"\"";
    }
}
