/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.esp.gephifileopener;

import java.awt.Desktop;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import static java.lang.Compiler.command;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.ToolTipManager;
import jsyntaxpane.DefaultSyntaxKit;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
dtd = "-//org.esp.gephifileopener//editCPP//EN",
autostore = false)
@TopComponent.Description(
preferredID = "editCPPTopComponent",
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "output", openAtStartup = false)
@ActionID(category = "Window", id = "org.esp.gephifileopener.editCPPTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
displayName = "#CTL_editCPPAction",
preferredID = "editCPPTopComponent")
@Messages({
    "CTL_editCPPAction=Code Editor",
    "CTL_editCPPTopComponent=Code Editor Window",
    "HINT_editCPPTopComponent=This is a code editor window"
})
public final class editCPPTopComponent extends TopComponent {
    
    public editCPPTopComponent() {
        initComponents();
        setName(Bundle.CTL_editCPPTopComponent());
        setToolTipText(Bundle.HINT_editCPPTopComponent());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        codePane = new javax.swing.JEditorPane();
        jToolBar1 = new javax.swing.JToolBar();
        openButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        filenameField = new javax.swing.JTextField();
        refreshButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setName("codePanel"); // NOI18N

        codePane.setToolTipText(org.openide.util.NbBundle.getMessage(editCPPTopComponent.class, "editCPPTopComponent.codePane.toolTipText")); // NOI18N
        jScrollPane1.setViewportView(codePane);

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        openButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/esp/gephifileopener/duplicateWorkspace.png"))); // NOI18N
        openButton.setToolTipText(org.openide.util.NbBundle.getMessage(editCPPTopComponent.class, "editCPPTopComponent.openButton.toolTipText")); // NOI18N
        openButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                openButtonMouseClicked(evt);
            }
        });
        jToolBar1.add(openButton);

        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/esp/gephifileopener/saveProject.png"))); // NOI18N
        saveButton.setToolTipText(org.openide.util.NbBundle.getMessage(editCPPTopComponent.class, "editCPPTopComponent.saveButton.toolTipText")); // NOI18N
        saveButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveButtonMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                saveButtonMouseExited(evt);
            }
        });
        jToolBar1.add(saveButton);

        filenameField.setText(org.openide.util.NbBundle.getMessage(editCPPTopComponent.class, "editCPPTopComponent.filenameField.text")); // NOI18N
        filenameField.setToolTipText(org.openide.util.NbBundle.getMessage(editCPPTopComponent.class, "editCPPTopComponent.filenameField.toolTipText")); // NOI18N
        jToolBar1.add(filenameField);

        refreshButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/esp/gephifileopener/refresh.png"))); // NOI18N
        refreshButton.setToolTipText(org.openide.util.NbBundle.getMessage(editCPPTopComponent.class, "editCPPTopComponent.refreshButton.toolTipText")); // NOI18N
        refreshButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                refreshButtonMouseClicked(evt);
            }
        });
        jToolBar1.add(refreshButton);

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(editCPPTopComponent.class, "editCPPTopComponent.jButton1.text")); // NOI18N
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jToolBar1.add(jButton1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 474, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                .addContainerGap())
        );

        getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(editCPPTopComponent.class, "editCPPTopComponent.AccessibleContext.accessibleName")); // NOI18N
    }// </editor-fold>//GEN-END:initComponents

    private void openButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_openButtonMouseClicked
        // TODO add your handling code here:
        String filename = filenameField.getText();
        File cpp = new File(filename);
        editFile(cpp);
    }//GEN-LAST:event_openButtonMouseClicked

    private void refreshButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshButtonMouseClicked
        // TODO add your handling code here:
        setFileContent(readFile(filenameField.getText()));
    }//GEN-LAST:event_refreshButtonMouseClicked

    private void saveButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveButtonMouseClicked
        // TODO add your handling code here:
        saveFile();
    }//GEN-LAST:event_saveButtonMouseClicked

    private void saveButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveButtonMouseExited
        // TODO add your handling code here:
        saveButton.setToolTipText("Save the file.");
    }//GEN-LAST:event_saveButtonMouseExited

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        runCMD("ipconfig");
    }//GEN-LAST:event_jButton1MouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JEditorPane codePane;
    private javax.swing.JTextField filenameField;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton openButton;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
        DefaultSyntaxKit.initKit();
        
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
    
    public boolean editFile(final File file) {
        if (!Desktop.isDesktopSupported()) {
          return false;
        }

        Desktop desktop = Desktop.getDesktop();
        if (!desktop.isSupported(Desktop.Action.OPEN)) {
          return false;
        }

        try {
          desktop.open(file);
        } catch (IOException e) {
          // Log an error
          return false;
        }

        return true;
    }
    
    public void setFilename(String filename)
    {
        filenameField.setText(filename);
    }
    
    public void setFileContent(String content){
        codePane.setContentType("text/cpp");
        codePane.setText(content);
        jScrollPane1.setVisible(true);
    }
    
    public String readFile(String readFilename){
        String text = "Error.";
        try{
            FileReader in = new FileReader(readFilename);
            char[] buffer = new char[1024];
            int n = in.read(buffer);
            text = new String(buffer, 0, n);
        } catch (IOException ex){
            Exceptions.printStackTrace(ex);
        }
        return text;
    }
    
    public void saveFile(){
        try {
            FileWriter out = new FileWriter(filenameField.getText());
            out.write(codePane.getText());
            out.close();
            saveButton.setToolTipText("Saved.");
            ToolTipManager.sharedInstance().mouseMoved(
                new MouseEvent(saveButton, 0, 0, 0,
                        0, 0, // X-Y of the mouse for the tool tip
                        0, false));
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
    }
    
    public void runCMD(String cmd){
        try {
            // Run "netsh" Windows command
            Process process = Runtime.getRuntime().exec(cmd);

            // Get input streams
            BufferedReader stdInput = new BufferedReader(new InputStreamReader(process.getInputStream()));
            BufferedReader stdError = new BufferedReader(new InputStreamReader(process.getErrorStream()));

            // Read command standard output
            String s;
            System.out.println("Standard output: ");
            while ((s = stdInput.readLine()) != null) {
                System.out.println(s);
            }

            // Read command errors
            System.out.println("Standard error: ");
            while ((s = stdError.readLine()) != null) {
                System.out.println(s);
            }
        } catch (Exception e) {
            e.printStackTrace(System.err);
        }
    }
}
